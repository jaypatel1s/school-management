.card
  .card-body
    .app-brand.justify-content-center
      %a.app-brand-link.gap-2{ href: 'index.html' }
    %h4.mb-2= t('devise.sessions.welcome_to_school_management_system')
    = form_for(resource, as: resource_name, url: session_path(resource_name), html: { class: 'mb-3' }) do |f|
      .mb-3
        %label.form-label.required{ for: 'email' }= t('devise.sessions.email')
        = f.email_field :email, autofocus: true, class: 'form-control', required: true, placeholder: 'Enter your email'
      .mb-3.form-password-toggle
        %label.form-label.required{ for: 'password' }= t('devise.sessions.password')
        .input-group.input-group-merge
          = f.password_field :password, autocomplete: 'new-password', class: 'form-control', required: true, placeholder: '············'
          %span.input-group-text.cursor-pointer
            %i.bx.bx-hide
      .mb-3
        #webauthn-login
          %button.btn.btn-primary.d-grid.w-100{ id: "login-button" } Login with Passkey
        %button.btn.btn-primary.d-grid.w-100{ type: 'submit' }= t('devise.sessions.sign_in')
      .d-flex.justify-content-between
        = link_to new_confirmation_path(resource_name) do
          %small= t('devise.sessions.resend_verification')
        = link_to new_password_path(resource_name) do
          %small= t('devise.sessions.forget_password')
    %p.text-center
      %span= t('devise.sessions.new_platform')
      = link_to new_registration_path(resource_name) do
        %span= t('devise.sessions.create_account')


- content_for :js_code do
  :javascript
    $(document).ready(function() {
      function base64UrlToArrayBuffer(base64Url) {
        const padding = '='.repeat((4 - base64Url.length % 4) % 4);
        const base64 = (base64Url + padding).replace(/-/g, '+').replace(/_/g, '/');
        const rawData = window.atob(base64);
        const outputArray = new Uint8Array(rawData.length);

        for (let i = 0; i < rawData.length; ++i) {
          outputArray[i] = rawData.charCodeAt(i);
        }
        return outputArray.buffer;
      }

      // Helper function to convert an array of Base64Url strings to an array of ArrayBuffer
      function base64UrlArrayToArrayBufferArray(base64UrlArray) {
        return base64UrlArray.map(base64UrlToArrayBuffer);
      }

      function stringToArrayBuffer(str) {
        const encoder = new TextEncoder();
        return encoder.encode(str).buffer;
      }
      if ($('#webauthn-login').length) {
        $('#login-button').on('click', async function() {
          try {
            const response = await $.get('/webauthn_login');
            const options = response;
            // Convert Base64Url encoded values to ArrayBuffer
            if (options.challenge) {
              options.challenge = base64UrlToArrayBuffer(options.challenge);
            }
            if (options.user && options.user.id) {
              options.user.id = stringToArrayBuffer(options.user.id);
            }
            if (options.excludeCredentials) {
              options.excludeCredentials = options.excludeCredentials.map(cred => ({
                type: cred.type,
                id: base64UrlToArrayBuffer(cred.id)
              }));
            }
            if (options.pubKeyCredParams) {
              options.pubKeyCredParams = options.pubKeyCredParams.map(param => ({
                type: param.type,
                alg: param.alg
              }));
            }
            const credential = await navigator.credentials.get({ publicKey: options });

            function bufferToBase64(buffer) {
              let binary = '';
              const bytes = new Uint8Array(buffer);
              const len = bytes.byteLength;
              for (let i = 0; i < len; i++) {
                binary += String.fromCharCode(bytes[i]);
              }
              return window.btoa(binary);
            }

            function transformBase64Url(base64) {
              return base64
                .replace(/\+/g, '-')
                .replace(/\//g, '_')
                .replace(/=+$/, '');
            }

            const serializedCredential = {
              id: credential.id,
              rawId: bufferToBase64(credential.rawId),
              type: credential.type,
              response: {
                authenticatorData: bufferToBase64(credential.response.authenticatorData),
                clientDataJSON: bufferToBase64(credential.response.clientDataJSON),
                signature: bufferToBase64(credential.response.signature),
                userHandle: credential.response.userHandle ? bufferToBase64(credential.response.userHandle) : null,
              },
            };

            const result = await $.ajax({
              url: '/verify_webauthn_login',
              type: 'POST',
              contentType: 'application/json',
              data: JSON.stringify({ webauthn_credential: serializedCredential, challenge: transformBase64Url(bufferToBase64(options.challenge))}),
              dataType: 'json'
            });

            if (result.success) {
              alert('WebAuthn login successful!');
              window.location.href = '/dashboard';
            } else {
              alert('WebAuthn login failed: ' + result.error);
            }
          } catch (error) {
            alert('Error: ' + error.message);
          }
        });
      }
    });
