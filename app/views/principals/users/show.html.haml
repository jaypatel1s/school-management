#webauthn-registration{ data: { customer_slug: @user.slug, college_slug: @current_college.slug } }
  %button#register-button Register
- content_for :js_code do
  :javascript
    $(document).ready(function() {
      function base64UrlToArrayBuffer(base64Url) {
        const padding = '='.repeat((4 - base64Url.length % 4) % 4);
        const base64 = (base64Url + padding).replace(/-/g, '+').replace(/_/g, '/');
        const rawData = window.atob(base64);
        const outputArray = new Uint8Array(rawData.length);

        for (let i = 0; i < rawData.length; ++i) {
          outputArray[i] = rawData.charCodeAt(i);
        }
        return outputArray.buffer;
      }

      // Helper function to convert an array of Base64Url strings to an array of ArrayBuffer
      function base64UrlArrayToArrayBufferArray(base64UrlArray) {
        return base64UrlArray.map(base64UrlToArrayBuffer);
      }

      function stringToArrayBuffer(str) {
        const encoder = new TextEncoder();
        return encoder.encode(str).buffer;
      }
      const webauthnRegistration = $('#webauthn-registration');
      // Registration
      if (webauthnRegistration.length) {
        $('#register-button').on('click', async function() {
          try {
            const UserSlug = webauthnRegistration.data('customer-slug');
            const collegeSlug = webauthnRegistration.data('college-slug');
            const response = await $.get('/colleges/' + collegeSlug + '/users/' + UserSlug + '/new_webauthn_registration');
            const options = response;

            // Convert Base64Url encoded values to ArrayBuffer
            if (options.challenge) {
              options.challenge = base64UrlToArrayBuffer(options.challenge);
            }
            if (options.user && options.user.id) {
              options.user.id = stringToArrayBuffer(options.user.id);
            }
            if (options.excludeCredentials) {
              options.excludeCredentials = options.excludeCredentials.map(cred => ({
                type: cred.type,
                id: base64UrlToArrayBuffer(cred.id)
              }));
            }
            if (options.pubKeyCredParams) {
              options.pubKeyCredParams = options.pubKeyCredParams.map(param => ({
                type: param.type,
                alg: param.alg
              }));
            }


            const credential = await navigator.credentials.create({ publicKey: options });

            function bufferToBase64(buffer) {
              return btoa(String.fromCharCode(...new Uint8Array(buffer)));
            }

            function transformBase64Url(base64) {
              return base64
                .replace(/\+/g, '-')
                .replace(/\//g, '_')
                .replace(/=+$/, '');
            }

            const serializedCredential = {
              id: credential.id,
              rawId: bufferToBase64(credential.rawId),
              type: credential.type,
              response: {
                attestationObject: bufferToBase64(credential.response.attestationObject),
                clientDataJSON: bufferToBase64(credential.response.clientDataJSON)
              }
            };
            const result = await $.ajax({
              url: '/colleges/'+ collegeSlug + '/users/' + UserSlug + '/create_webauthn_registration',
              type: 'POST',
              contentType: 'application/json',
              data: JSON.stringify({ webauthn_credential: serializedCredential, challenge: transformBase64Url(bufferToBase64(options.challenge))}),
              dataType: 'json'
            });

            if (result.success) {
              alert('WebAuthn registration successful!');
            } else {
              alert('WebAuthn registration failed: ' + result.error);
            }
          } catch (error) {
            console.error('Error:', error); // Improved error handling
            alert('Error: ' + error.message);
          }
        });
      }
    });
